[project]
name = "dexscreen"
version = "0.0.5"
description = "Python wrapper for Dexscreener API with stable HTTP support"
authors = [{ name = "solanab", email = "whiredj@gmail.com" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["dexscreener", "crypto", "cryptocurrency", "api", "http"]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = ["pydantic>=2.11", "curl-cffi>=0.12", "orjson>=3.11"]

[project.urls]
Repository = "https://github.com/solanab/dexscreen"
Documentation = "https://github.com/solanab/dexscreen#readme"
Issues = "https://github.com/solanab/dexscreen/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dexscreen"]

[dependency-groups]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    # Linting/Formatting
    "ruff>=0.5.0",
    "pyright>=1.1.403",
    "pre-commit>=4.1.0",
    "yamllint>=1.37.1",
    "yamlfix>=1.16.0",
    # Documentation
    "mkdocs-material>=9.6.0",
    "mkdocs-static-i18n>=1.2.0",
]

[tool.uv.sources]

# Ruff 配置 - 替代多个 linter 和 pre-commit-hooks
[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings (包含 trailing whitespace)
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T10", # flake8-debugger (替代 debug-statements)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff 特定规则
]
ignore = [
    "E501",   # line too long (由 formatter 处理)
    "RUF006", # Store async task reference (fire-and-forget tasks)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
pythonVersion = "3.9"
typeCheckingMode = "basic"
reportMissingImports = false

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
pythonpath = ["."]

[tool.coverage.run]
source = ["dexscreen"]
omit = ["*/tests/*", "*/examples/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# yamlfix 配置
[tool.yamlfix]
line_length = 120
sequence_style = "block_style"
preserve_quotes = false
explicit_start = false
explicit_end = false
whitelines = 1
section_whitelines = 0
config_path = ".yamllint"
